[{"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/index.js":"1","/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/reportWebVitals.js":"2","/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/firebase.js":"3","/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/Home.js":"4","/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/components/CommitmentRecord/CommitmentRecord.js":"5"},{"size":562,"mtime":1610449961695,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609340526425,"results":"8","hashOfConfig":"7"},{"size":623,"mtime":1610454153270,"results":"9","hashOfConfig":"7"},{"size":2283,"mtime":1610716876749,"results":"10","hashOfConfig":"7"},{"size":12675,"mtime":1610716860630,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"zdn7wk",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/index.js",[],["24","25"],"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/reportWebVitals.js",[],"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/firebase.js",[],"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/Home.js",[],"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/components/CommitmentRecord/CommitmentRecord.js",["26","27"],"import React, { Component } from 'react'\nimport * as moment from 'moment'\n\nimport { db } from '../../firebase.js';\n\nimport { DropdownDate, DropdownComponent } from 'react-dropdown-date';\n\nimport './CommitmentRecord.css';\n\n// Key Logic \n// : Record each of Hour and Minute INDIVIDUALL.\n// : Convert into HH:MM format when DISPLAYING the time (NOT when recording the time).\n\nexport default class CommitmentRecord extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      year: null,\n      month: null,\n      day: null, \n      selectedDate: this.formatDate(new Date()),       \n      DWHourInput: \"\",\n      DWMinuteInput: \"\",\n      dailyProgressInput: \"\",\n      weeklyDWTimeTotal: \"\",      \n      recordResult: \"\",\n    }\n    this.props = {\n    }\n\n    this.addDailyCommitment = this.addDailyCommitment.bind(this)  \n\n  }  \n\n  componentDidMount() {\n    this.calculateWeeklyDWHoursAndMinutesTotal()\n  }\n\n\n\n  // *** For MANIPULATING Date and Time ***\n\n  formatDate (date) {\t// formats a JS date to 'yyyy-mm-dd'\n  // date Param \n    // = When the Component did Mount, it is Passed from this.ccalculateCurrentWeeklyTotalTime()\n    // = When the date input changed, Passed from <DropdownDate>/onDateChange Event Handler Property \n    var d = new Date(date),   \n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = '' + d.getFullYear();\n      // console.log(month)\n      // -> 1\n      // console.log(typeof(month))\n      // -> string\n      \n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-');\n    // This is String Data Type\n    // => CAN be used directly as the Firebase/Firestore/Document names\n  }\n\n  // *** Weekly DW Time ***\n  calculateWeeklyDWHoursAndMinutesTotal() {  \n    let weeklyDWHourTotal = 0;\n    let weeklyDWMinutesTotal = 0;\n    \n    let weekDays = this.calculateTheCurrentWeek()\n\n    // FECTH the Document MATCHING to the weekly dates.\n    weekDays.map((weekDay)=>{\n      db.collection('commitment-record').doc(weekDay).get()\n      .then((res)=>{\n        // console.log(res.data()['Date'])\n        // console.log(res.data()['DW Hour'])\n        weeklyDWHourTotal += parseInt(res.data()['DW Hour']) \n        // console.log(\"calculateWeeklyDWHoursAndMinutesTotal()/weeklyDWHourTotal\", weeklyDWHourTotal) \n\n        weeklyDWMinutesTotal += parseInt(res.data()['DW Minute'])  \n        // console.log(\"calculateWeeklyDWHoursAndMinutesTotal()/weeklyDWMinutesTotal\", weeklyDWMinutesTotal)\n\n        // console.log(\"weeklyDWHourTotal: \", weeklyDWHourTotal)\n        let weeklyDWHourTotalInMinutes = this.convertDWHoursIntoMinutes(weeklyDWHourTotal)\n        this.calculateWeeklyDWTimeTotal(weeklyDWHourTotalInMinutes, weeklyDWMinutesTotal)\n\n      })  \n      .catch((error)=> {\n        console.log(error)\n      })\n\n    })\n\n  }  \n\n    \n  calculateTheCurrentWeek() { \n    let dates = [];\n    let formatedDates = [];\n\n    // Get the DATES in the CURRENT Week.\n    var startOfWeek = moment().startOf('isoWeek');\n    var endOfWeek = moment().endOf('isoWeek');    \n    var day = startOfWeek;\n    \n    while (day <= endOfWeek) {\n        // console.log(day)\n        dates.push(day.toDate());\n        day = day.clone().add(1, 'd');\n    }\n    \n\n    // Convert each date into the SAME format as the date saved in the Firestore (YYYY-MM-DD). \n    dates.map((date)=> {\n      formatedDates.push(this.formatDate(date))\n    })\n\n    return formatedDates;\n  }\n\n  convertDWHoursIntoMinutes(weeklyDWHourTotal) {\n  //  console.log(\"convertDWHoursIntoMinutes()/weeklyDWHourTotal: \", weeklyDWHourTotal)\n    let weeklyDWHourTotalInMinutes = weeklyDWHourTotal * 60;\n  //  console.log(\"convertDWHoursIntoMinutes()/weeklyDWHourTotalInMinutes\", weeklyDWHourTotalInMinutes)\n\n  return weeklyDWHourTotalInMinutes;\n  }\n\n  calculateWeeklyDWTimeTotal(weeklyDWHourTotalInMinutes, weeklyDWMinutesTotal) {\n    \n    // console.log(\"...A Day\")\n    // console.log(\"calculateWeeklyDWTimeTotal()/weeklyDWHoursTotalInMinutes: \", weeklyDWHourTotalInMinutes)\n    // console.log(\"calculateWeeklyDWTimeTotal()/weeklyDWMinutesTotal: \", weeklyDWMinutesTotal)\n    let weeklyDWTimeTotalInMinutes = weeklyDWHourTotalInMinutes + weeklyDWMinutesTotal;\n    // let weeklyDWTimeTotalInMinutes = 71; \n      // Output: 1:11\n    // let weeklyDWTimeTotalInMinutes = 1441; \n      // Output: 24:01\n    // console.log(\"calculateWeeklyDWTimeTotal()/weeklyDWTimeTotalInMinutes: \", weeklyDWTimeTotalInMinutes)\n    \n\n    // Goal = Minutes (weeklyDWTimeTotalInMinutes) into HH:MM format.\n    // Src: https://www.w3resource.com/javascript-exercises/javascript-basic-exercise-51.php\n    let weeklyDWTimeTotalOfHours = Math.floor(weeklyDWTimeTotalInMinutes / 60)\n    // console.log(\"calculateWeeklyDWTimeTotal()/weeklyDWTimeTotalOfHours (= weeklyDWTimeTotalInMinutes / 60): \", weeklyDWTimeTotalOfHours, \"Hours\") \n\n      // Goal = Get the Decimals as Minute Remainder from Division for hours (weeklyDWTImeTotalOfHours).\n      // Src: https://stackoverflow.com/a/4512328/13710739\n      let weeklyDWTimeTotalOfHoursWithDecimal = weeklyDWTimeTotalInMinutes / 60; \n      let weeklyDWDecimal = weeklyDWTimeTotalOfHoursWithDecimal - weeklyDWTimeTotalOfHours;\n      // console.log(\"weeklyDWDecimal: \", weeklyDWDecimal)\n    \n    // Goal = Decimals into Minutes.  \n    let weeklyDWTimeTotalOfMinutes = \"\" + Math.round(weeklyDWDecimal * 60);\n      // Allows concatenating 0 before the minute of a SINGLE number. \n    if(weeklyDWTimeTotalOfMinutes.length < 2) {\n      weeklyDWTimeTotalOfMinutes = \"0\" + weeklyDWTimeTotalOfMinutes\n      // console.log(weeklyDWTimeTotalOfMinutes)\n    }  \n    \n    // console.log(\"calculateWeeklyDWTimeTotal()/weeklyDWTimeTotalOfMinutes: \", weeklyDWTimeTotalOfMinutes, \"Minutes\") \n\n    // Goal = Concatenate Hours and Minutes into HH:MM format. \n    let weeklyDWTimeTotal = `${weeklyDWTimeTotalOfHours}:${weeklyDWTimeTotalOfMinutes} (= ${weeklyDWTimeTotalInMinutes} Minutes)`;\n    // console.log(\"calculateWeeklyDWTimeTotal()/weeklyDWTimeTotal: \", weeklyDWTimeTotal)\n    // console.log(\"Date Type of weeklyDWTimeTotal: \", typeof weeklyDWTimeTotal)\n\n    // Goal = Update State with the result Weekly DW Time Total in HH:MM to \n    this.setState({\n      weeklyDWTimeTotal: weeklyDWTimeTotal\n    })\n    \n  }\n    \n\n  // *** For RECORDING Commit ***\n  getDailyProgress() {\n    let dailyProgress = `${this.state.dailyProgress}`;\n    console.log(\"getDailyProgress()/dailyProgress\", dailyProgress)\n\n    return dailyProgress;\n  }\n\n  addDailyCommitment() {    \n    // let DWTime = this.getDWTime()\n    let dailyProgress = this.getDailyProgress()\n    let date = this.state.selectedDate;\n    \n    db.collection('commitment-record').doc(date).set({\n      \"Date\": this.state.selectedDate,\n      \"DW Hour\": this.state.DWHourInput,\n      \"DW Minute\": this.state.DWHourInput,\n      \"Daily Progress\": dailyProgress,\n    })\n    .then((response)=> {\n      this.setState({\n        recordResult: \n        `\n        Added the following...\n        Daily DW Time = ${this.state.DWHourInput}:${this.state.DWMinuteInput}, \n        Daily Progress = ${this.state.dailyProgressInput}\n        ...\n        That's it!\n        `\n      })\n    })\n    .catch((error)=>{\n      this.setState({\n        recordResult: \n        `\n        Recording failed...\n        An erorr happened: ${error}\n        ...\n        Oh...\n        `\n        \n      })\n    })\n\n  }\n\n  // deleteCommitments() {\n  // //!!! The code underneath delete ALL the Documents \n  // db.collection('public-commitment')\n  //   .get()\n  //   .then(res => {\n  //     res.forEach(element => {\n  //       // element.ref.delete();\n  //     });\n  //   });\n  // }\n  \n  render() {\n    return (\n      <div>\n        <div>Weekly Deep Work Time: {this.state.weeklyDWTimeTotal}</div>\n        <div className=\"record\">\n          <div className=\"datepicker_container\">\n\n            <DropdownDate\n              // startDate={                       // optional, if not provided 1900-01-01 is startDate\n              //   '2020-12.25'                    // 'yyyy-mm-dd' format only\n              // }\n              // endDate={                         // optional, if not provided current date is endDate\n              //   '2021-12-25'                    // 'yyyy-mm-dd' format only\n              // }\n              selectedDate={                    // optional\n                this.state.selectedDate         // 'yyyy-mm-dd' format only\n              }\n              order={[                          // optional\n                DropdownComponent.year,         // Order of the dropdowns\n                DropdownComponent.month,\n                DropdownComponent.day,\n              ]}\n              // onYearChange={(year) => {         // optional\n              //   // console.log(year);\n              // }}\n              // onMonthChange={(month) => {       // optional\n              //   // console.log(month);\n              // }}\n              // onDayChange={(day) => {           // optional\n              //   // console.log(day);\n              // }}\n              onDateChange={(date) => {         // optional\n                // console.log(date);\n                this.setState(\n                  { \n                    // date: date, \n                    selectedDate: this.formatDate(date), \n                    // selectedDate: date,\n                  });\n              }}\n              ids={                             // optional\n                {\n                  year: 'select-year',\n                  month: 'select-month',\n                  day: 'select-day'\n                }\n              }\n              names={                           // optional\n                {\n                  year: 'year',\n                  month: 'month',\n                  day: 'day'\n                }\n              }\n              classes={                         // optional\n                {\n                  dateContainer: 'classes',\n                  yearContainer: 'classes',\n                  monthContainer: 'classes',\n                  dayContainer: 'classes',\n                  year: 'classes classes',\n                  month: 'classes classes',\n                  day: 'classes classes',\n                  yearOptions: 'classes',\n                  monthOptions: 'classes',\n                  dayOptions: 'classes'\n                }\n              }\n              defaultValues={                   // optional\n                {\n                  year: 'Select Year',\n                  month: 'Select Month',\n                  day: 'Select Day'\n                }\n              }\n              options={                         // optional\n                {\n                  yearReverse: true,            // false by default\n                  monthShort: true,             // false by default\n                  monthCaps: true               // false by default\n                }\n              }\n            />\n          </div>\n\n          {/* <label htmlFor=\"date\">The Date</label>\n          <input \n            id=\"date\"\n            className=\"date_input\"\n            placeholder=\"Type Date (YYYY.MM.DD).\"\n            value={this.state.date}\n            onChange={(e)=>this.getDateInput(e.target.value)}\n          ></input> */}\n\n            <label htmlFor=\"time\">Deep Work Time</label>\n          <div className=\"DWTime_input\">\n            <input \n              id=\"DWHour\"\n              className=\"DWhour_input\"\n              placeholder=\"Hour\"\n              onChange={(e)=> this.setState({\n                DWHourInput: e.target.value,\n              })}\n            ></input>\n            <div className=\"time_collon\"> : </div>\n            <input \n              id=\"DWMinute\"\n              className=\"DWminute_input\"\n              placeholder=\"Minute\"\n              onChange={(e)=> this.setState({\n                DWMinuteInput: e.target.value,\n              })}\n            ></input>\n          </div>\n          <label htmlFor=\"progress\">Daily Progress</label>\n          <textarea\n            id=\"progress\"\n            className=\"progress_input\"\n            placeholder=\": DAILY-PROGRESS-1\"\n            onChange={(e)=> this.setState({\n              dailyProgressInput: e.target.value\n            })}\n          >\n          </textarea>\n\n          <button\n            className=\"submit-button\"\n            onClick={this.addDailyCommitment}\n          >\n            Add\n          </button>\n\n\n          {/* <button\n            className=\"delete-button\"\n            onClick={this.deleteCommitments}\n          >\n            Delete\n          </button> */}\n\n          <div className=\"result\">\n            {this.state.recordResult}\n          </div>\n\n        </div>    \n\n       </div>      \n    )\n  }\n}\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":72,"column":27,"nodeType":"34","messageId":"35","endLine":72,"endColumn":29},{"ruleId":"32","severity":1,"message":"33","line":114,"column":21,"nodeType":"34","messageId":"35","endLine":114,"endColumn":23},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]