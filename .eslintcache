[{"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/index.js":"1","/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/reportWebVitals.js":"2","/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/firebase.js":"3","/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/Home.js":"4","/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/components/CommitmentRecord/CommitmentRecord.js":"5"},{"size":562,"mtime":1610449961695,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1609340526425,"results":"8","hashOfConfig":"7"},{"size":623,"mtime":1610454153270,"results":"9","hashOfConfig":"7"},{"size":2499,"mtime":1610530933191,"results":"10","hashOfConfig":"7"},{"size":9014,"mtime":1610454184283,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"svqskd",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/index.js",[],["24","25"],"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/reportWebVitals.js",[],"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/firebase.js",[],"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/Home.js",[],"/Users/qitengzhanye/Library/Mobile Documents/com~apple~CloudDocs/todo-programming/commitment-record/commitment-record-react/src/components/CommitmentRecord/CommitmentRecord.js",["26","27"],"import React, { Component } from 'react'\nimport * as moment from 'moment'\n\nimport { db } from '../../firebase.js';\n\nimport { DropdownDate, DropdownComponent } from 'react-dropdown-date';\n\nimport './CommitmentRecord.css';\n\n\nexport default class CommitmentRecord extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      year: null,\n      month: null,\n      day: null, \n      selectedDate: this.setToday(), \n      dwTime: \"\",\n      dailyProgress: \"\",\n      weeklyDWTotal: 0,\n    }\n    this.props = {\n    }\n\n    this.addDailyCommitment = this.addDailyCommitment.bind(this)  \n\n  }  \n\n  componentDidMount() {\n    // console.log(\"this.state.selectedDate from componentDidMount(): \", this.state.selectedDate)\n    this.setToday()\n    this.calculateCurrentWeeklyTotalTime()\n  }\n\n  componentDidUpdate() {\n    // console.log(\"this.state.selectedDate from componentDidUpdate(): \", this.state.selectedDate)\n    // console.log(\"this.state.weeklyDWTotal from componentDidUpdate(): \", this.state.weeklyDWTotal)\n  }\n\n  // *** For MANIPULATING Date and Time ***\n\n  setToday() {\n        \n    var today = new Date();\n    var formatedToday = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n  \n    return formatedToday;\n\n  }\n    \n  formatDate (date) {\t// formats a JS date to 'yyyy-mm-dd'\n    var d = new Date(date),   \n      month = '' + (d.getMonth() + 1),\n      day = '' + d.getDate(),\n      year = '' + d.getFullYear();\n\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n\n    return [year, month, day].join('-');\n  }\n\n   calculateCurrentWeeklyTotalTime () {     \n     let dates = [];\n     let formatedDates = [];\n\n    // Get the DATES in the CURRENT Week.\n    var startOfWeek = moment().startOf('isoWeek');\n    var endOfWeek = moment().endOf('isoWeek');    \n    var day = startOfWeek;\n    \n    while (day <= endOfWeek) {\n        // console.log(day)\n        dates.push(day.toDate());\n        day = day.clone().add(1, 'd');\n    }\n    \n    // console.log(dates);\n\n    // Convert each date into theÂ  the SAME format as the date saved in the Firestore (YYYY-MM-DD). \n    dates.map((date)=> {\n      formatedDates.push(this.formatDate(date))\n    })\n\n    // console.log(formatedDates)\n\n    // FECTH the Document MATCHING to the weekly dates.\n    formatedDates.map((date)=>{\n       db.collection('commitment-record').doc(date).get()\n       .then((res)=>{\n        // console.log(res.data()['DW Time']);\n        // Calculate the total of all the FETCHED dates. (weeklyDWTotalVariable)\n        this.updateWeeklyDWTotal(res.data()['DW Time'])\n        \n       })\n       \n       .catch((error)=> {\n         console.log(error)\n       })\n\n    })\n\n   }\n\n\n  // Update the State for the Weekly Total (weeklyDWTotal State).\n  updateWeeklyDWTotal(dailyDWTotal) {\n    // console.log(dailyDWTotal)\n\n    this.setState((state, props)=> {\n      return {weeklyDWTotal: state.weeklyDWTotal + dailyDWTotal}\n    })\n    \n  }\n\n  // *** For RECORDING Commit ***\n\n  getYearSelection(yearSelection) {\n    // console.log(yearSelection)\n    this.setState({\n      date: yearSelection\n    })\n  }\n\n    \n  getMonthSelection(monthSelection) {\n    // console.log(monthSelection)\n    this.setState({\n      date: monthSelection\n    })\n  }\n\n  getDateSelection(dateSelection) {\n    // console.log(dateSelection)\n    this.setState({\n      date: dateSelection\n    })\n  }\n\n  getDWTime(timeInput) {\n    this.setState({\n      dwTime: timeInput\n    })\n  }\n\n    \n  getDailyProgress(progressInput) {\n    this.setState({\n      dailyProgress: progressInput\n    })\n  }\n\n  addDailyCommitment() {       \n    let date = this.state.selectedDate;\n    let dateString = date.toString()\n    let dwTimeInNumber = parseInt(this.state.dwTime)\n          \n    db.collection('commitment-record').doc(dateString).set({\n      \"Date\": this.state.selectedDate,\n      \"DW Time\": dwTimeInNumber,\n      \"Daily Progress\": this.state.dailyProgress,\n    })\n\n    this.setState({\n      date: \"\",\n      time: \"\",\n      progress: \"\",\n    })\n    \n\n  }\n\n  // deleteCommitments() {\n  // //!!! The code underneath delete ALL the Documents \n  // db.collection('public-commitment')\n  //   .get()\n  //   .then(res => {\n  //     res.forEach(element => {\n  //       // element.ref.delete();\n  //     });\n  //   });\n  // }\n  \n  render() {\n    return (\n      <div className=\"public_commitment_container\">\n        <div className=\"record\">\n          <div className=\"datepicker_container\">\n\n            <DropdownDate\n              // startDate={                       // optional, if not provided 1900-01-01 is startDate\n              //   '2020-12.25'                    // 'yyyy-mm-dd' format only\n              // }\n              // endDate={                         // optional, if not provided current date is endDate\n              //   '2021-12-25'                    // 'yyyy-mm-dd' format only\n              // }\n              selectedDate={                    // optional\n                this.state.selectedDate         // 'yyyy-mm-dd' format only\n              }\n              order={[                          // optional\n                DropdownComponent.year,         // Order of the dropdowns\n                DropdownComponent.month,\n                DropdownComponent.day,\n              ]}\n              onYearChange={(year) => {         // optional\n                // console.log(year);\n                this.getYearSelection(year)\n              }}\n              onMonthChange={(month) => {       // optional\n                // console.log(month);\n                this.getMonthSelection(month)\n              }}\n              onDayChange={(day) => {           // optional\n                // console.log(day);\n                this.getDateSelection(day)\n              }}\n              onDateChange={(date) => {         // optional\n                // console.log(date);\n                this.setState(\n                  { \n                    // date: date, \n                    selectedDate: this.formatDate(date), \n                    // selectedDate: date,\n                  });\n              }}\n              ids={                             // optional\n                {\n                  year: 'select-year',\n                  month: 'select-month',\n                  day: 'select-day'\n                }\n              }\n              names={                           // optional\n                {\n                  year: 'year',\n                  month: 'month',\n                  day: 'day'\n                }\n              }\n              classes={                         // optional\n                {\n                  dateContainer: 'classes',\n                  yearContainer: 'classes',\n                  monthContainer: 'classes',\n                  dayContainer: 'classes',\n                  year: 'classes classes',\n                  month: 'classes classes',\n                  day: 'classes classes',\n                  yearOptions: 'classes',\n                  monthOptions: 'classes',\n                  dayOptions: 'classes'\n                }\n              }\n              defaultValues={                   // optional\n                {\n                  year: 'Select Year',\n                  month: 'Select Month',\n                  day: 'Select Day'\n                }\n              }\n              options={                         // optional\n                {\n                  yearReverse: true,            // false by default\n                  monthShort: true,             // false by default\n                  monthCaps: true               // false by default\n                }\n              }\n            />\n          </div>\n\n          {/* <label htmlFor=\"date\">The Date</label>\n          <input \n            id=\"date\"\n            className=\"date_input\"\n            placeholder=\"Type Date (YYYY.MM.DD).\"\n            value={this.state.date}\n            onChange={(e)=>this.getDateInput(e.target.value)}\n          ></input> */}\n\n          <label htmlFor=\"time\">Deep Work Time</label>\n          <input \n            id=\"time\"\n            className=\"time_input\"\n            placeholder=\"Type Deep Work Hours (Natural Number)\"\n            value={this.state.dwTime}\n            onChange={(e)=>this.getDWTime(e.target.value)}\n          ></input>\n          <label htmlFor=\"progress\"> Daily Progress</label>\n          <textarea\n            id=\"progress\"\n            className=\"progress_input\"\n            placeholder=\"Type Daily Progress.\"\n            value={this.state.dailyProgress}\n            onChange={(e)=>this.getDailyProgress(e.target.value)}\n          >\n          </textarea>\n\n          <button\n            className=\"submit-button\"\n            onClick={this.addDailyCommitment}\n          >\n            Add\n          </button>\n\n          <div>Weekly Deep Work Time: {this.state.weeklyDWTotal}</div>\n\n          {/* <button\n            className=\"delete-button\"\n            onClick={this.deleteCommitments}\n          >\n            Delete\n          </button> */}\n\n\n        </div>    \n\n       </div>      \n    )\n  }\n}\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":82,"column":21,"nodeType":"34","messageId":"35","endLine":82,"endColumn":23},{"ruleId":"32","severity":1,"message":"33","line":89,"column":29,"nodeType":"34","messageId":"35","endLine":89,"endColumn":31},"no-native-reassign",["36"],"no-negated-in-lhs",["37"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]